<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在SpringBoot中应用OOP</title>
    <link href="/2023/02/06/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2-2023-02-06-%E5%9C%A8SpringBoot%E4%B8%AD%E5%BA%94%E7%94%A8OOP-2023-02-06-%E5%9C%A8SpringBoot%E4%B8%AD%E5%BA%94%E7%94%A8OOP/"/>
    <url>/2023/02/06/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2-2023-02-06-%E5%9C%A8SpringBoot%E4%B8%AD%E5%BA%94%E7%94%A8OOP-2023-02-06-%E5%9C%A8SpringBoot%E4%B8%AD%E5%BA%94%E7%94%A8OOP/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>以前做的Java项目大多分为Controller、Service、DAO三层：</p><ul><li>Controller层，负责处理请求和响应，包括类型转换、提取用户信息、鉴权等；</li><li>Service层，负责处理业务逻辑，多数时候都是将业务代码直接放在这一层；</li><li>DAO层，负责持久化；</li></ul><p>业务代码都写在Service层，在业务简单时看起来还是挺清晰的，但当业务越来越复杂，如果还是这么做，Service层会变得越来越臃肿，不利于维护。考虑到Java是一门面向对象编程语言，我们在这样的项目代码中往往没有应用面向对象编程的方法。还有一点，代码写在Service层不利于单元测试，主要因为Service和其中的依赖作为Bean是被Spring框架管理的，单元测试要先启动Spring上下文，才能正常调用Service的方法。</p><h2 id="重构的过程"><a href="#重构的过程" class="headerlink" title="重构的过程"></a>重构的过程</h2><p>没错，就是重构。因为一开始我还是先按以前的方式将代码写在Service层，实现了系统功能之后，为了优化代码（好玩）才做改造的。</p><h3 id="实体类：Record"><a href="#实体类：Record" class="headerlink" title="实体类：Record"></a>实体类：Record</h3><p>这次面向对象重构的对象是时间记录的主要实体类<code>Record</code>。每一条时间记录都有多个标签，所以还有一个类<code>RecordTagMap</code>用于描述<code>Record</code>和<code>Tag</code>的关联关系。</p><p>面向对象中的实体类包含了数据的形式（属性）以及对数据的操作（行为）。属性就是类中的一个个成员变量，而行为就是一个个实现业务逻辑的成员方法。</p><h4 id="Record的属性"><a href="#Record的属性" class="headerlink" title="Record的属性"></a>Record的属性</h4><p>包括Id、日期、时长、内容等。</p><h4 id="Record的行为"><a href="#Record的行为" class="headerlink" title="Record的行为"></a>Record的行为</h4><p>业务逻辑就是很简单的CRUD操作，只是还需要同时维护<code>RecordTagMap</code>，而这些原本都是写在Service里，因为很自然地就会将跟数据库（外部依赖项）打交道的事情交给Service。但是后来仔细想想，跟数据库的交互其实是由JPA的Repository实现的，而Service只是声明出来，交给内部代码去使用罢了，Service的职责只是调用程序各方来实现功能。所以CRUD操作也可以封装到<code>Record</code>中，只要将Repository提供给对象，由对象使用即可。这种行为是让对象保存它自己。</p><p>将CRUD操作封装到类里，这使得这个实体类变成“充血模型”。</p><p>由于这里的Repository是一个Interface，所以也符合代理模式。</p><h4 id="RecordDTO和RecordPO"><a href="#RecordDTO和RecordPO" class="headerlink" title="RecordDTO和RecordPO"></a>RecordDTO和RecordPO</h4><p><code>RecordDTO</code>原先也有，作为前后端数据交互的载体，只是原先的转换方法由DTO实现，现在迁移到<code>Record</code>中，回归到纯粹的数据对象。<br>原先的持久化实体类是<code>Record</code>，但这次重构之后，由于添加了业务行为，并且类的结构也变了，不太适合作为持久化实体。所以新增一个<code>RecordPO</code>类，作为与数据库交互的数据载体，也是纯粹的数据对象。<br><code>Record</code>与<code>RecordDTO</code>和<code>RecordPO</code>的转换方法也都封装到<code>Record</code>里。出发点是让DTO和PO都不知道实体类的存在（迪米特法则），但这个做法的必要性还有待考究（尤其是对于DTO）。</p><h4 id="Record重构前"><a href="#Record重构前" class="headerlink" title="Record重构前"></a>Record重构前</h4><p>重构前的<code>Record</code>就是一个很普通的持久化实体类，是典型的“贫血模型”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Record</span> &#123;<br>    <span class="hljs-comment">/* Field */</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-keyword">private</span> Long recordId;<br><br>    <span class="hljs-keyword">private</span> Integer userId;<br>    <span class="hljs-comment">// 略……</span><br><br>    <span class="hljs-comment">/* Constructor */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Record</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/* Getters and Setters */</span><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getRecordId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> recordId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRecordId</span><span class="hljs-params">(Long recordId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.recordId = recordId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getUserId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserId</span><span class="hljs-params">(Integer userId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userId = userId;<br>    &#125;<br>    <span class="hljs-comment">// 略……</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Record重构后"><a href="#Record重构后" class="headerlink" title="Record重构后"></a>Record重构后</h4><p>重构后的<code>Record</code>结构复杂很多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Record</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br>    <span class="hljs-comment">/* Field */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Long recordId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer userId;<br>    <span class="hljs-comment">// 略……</span><br><br>    <span class="hljs-comment">/* Repository */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RecordRepo recordRepo;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RecordTagMapRepo recordTagMapRepo;<br><br>    <span class="hljs-comment">/* Constructor */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Record</span><span class="hljs-params">(Builder builder)</span> &#123;<br>        <span class="hljs-comment">// 声明私有构造器，使得创建对象必须使用Builder</span><br>        <span class="hljs-built_in">this</span>.recordId = builder.recordId;<br>        <span class="hljs-built_in">this</span>.userId = builder.userId;<br>        <span class="hljs-comment">// 略……</span><br>    &#125;<br><br>    <span class="hljs-comment">/* Builder */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>        <span class="hljs-comment">// Builder模式</span><br>    &#125;<br><br>    <span class="hljs-comment">/* Behavior */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Record&gt; <span class="hljs-title function_">selectRecords</span><span class="hljs-params">(Integer userId, LocalDate date, RecordRepo recordRepo, RecordTagMapRepo recordTagMapRepo)</span> &#123;<br>        <span class="hljs-comment">// 按单个日期查询</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Record&gt; <span class="hljs-title function_">selectRecords</span><span class="hljs-params">(Integer userId, LocalDate startDate, LocalDate endDate, RecordRepo recordRepo, RecordTagMapRepo recordTagMapRepo)</span> &#123;<br>        <span class="hljs-comment">// 按日期期间查询</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Record <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 新增</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Record <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 更新</span><br>        <span class="hljs-type">RecordPO</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> recordRepo.findById(recordId).orElse(<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> (Objects.isNull(row) || !row.getUserId().equals(userId)) &#123;<br>            logger.warn(<span class="hljs-string">&quot;用户 &#123;&#125; 找不到记录 &#123;&#125;&quot;</span>, userId, recordId);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">RecordPO</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> recordRepo.save(<span class="hljs-built_in">this</span>.toPO());<br>        List&lt;Integer&gt; tagIdList = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (Objects.nonNull(tagIds)) &#123;<br>            List&lt;RecordTagMap&gt; mapList = saveTagMap(userId, recordId, tagIds);<br>            tagIdList = mapList.stream().map(RecordTagMap::getTagId).toList();<br>        &#125;<br>        <span class="hljs-keyword">return</span> fromPO(result, tagIdList, recordRepo, recordTagMapRepo);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 删除</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> List&lt;RecordTagMap&gt; <span class="hljs-title function_">saveTagMap</span><span class="hljs-params">(Integer userId, Long recordId, List&lt;Integer&gt; tagIds)</span> &#123;<br>        <span class="hljs-comment">// 保存Record中的Tag</span><br>    &#125;<br><br>    <span class="hljs-comment">/* Transfer */</span><br>    <span class="hljs-keyword">public</span> RecordDTO <span class="hljs-title function_">toDTO</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 转换成DTO</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Record <span class="hljs-title function_">fromDTO</span><span class="hljs-params">(Integer userId, RecordDTO dto, RecordRepo recordRepo, RecordTagMapRepo recordTagMapRepo)</span> &#123;<br>        <span class="hljs-comment">// 将DTO转换成实体</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> RecordPO <span class="hljs-title function_">toPO</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 转换成PO</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Record <span class="hljs-title function_">fromDTO</span><span class="hljs-params">(Integer userId, RecordDTO dto, RecordRepo recordRepo, RecordTagMapRepo recordTagMapRepo)</span> &#123;<br>        <span class="hljs-comment">// 将PO转换成实体</span><br>    &#125;<br><br>    <span class="hljs-comment">/* Getters */</span><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getRecordId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> recordId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getUserId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userId;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里面有3个问题：</p><ul><li>select查询方法也被封装到这个类中，其实查询多条数据并不是一个Record对象的行为，而是可能有另一个实体，比如一个查询器，专门来负责这个事情。但我不想创建太多类，所以我想，查询不是对象的行为，却可以是类的行为，所以就改为静态方法放到类中。今后如果查询方面的逻辑变得复杂，再考虑新增一个查询器来分担职责。</li><li>select查询方法变成静态，所需的Repository只能传参，参数多了会比较难看。</li><li>缺乏事务控制，只能交由外部调用方（Service）提供支持。</li></ul><h3 id="Service类：RecordService"><a href="#Service类：RecordService" class="headerlink" title="Service类：RecordService"></a>Service类：RecordService</h3><p><code>RecordService</code>的代码就精简了。</p><h4 id="RecordService重构前"><a href="#RecordService重构前" class="headerlink" title="RecordService重构前"></a>RecordService重构前</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecordService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RecordRepo recordRepo;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RecordTagMapRepo recordTagMapRepo;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> TagService tagService;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> RecordDTO <span class="hljs-title function_">insertRecord</span><span class="hljs-params">(RecordDTO input)</span> &#123;<br>        <span class="hljs-comment">// 新增记录</span><br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> RecordDTO <span class="hljs-title function_">updateRecord</span><span class="hljs-params">(RecordDTO input)</span> &#123;<br>        <span class="hljs-comment">// 更新记录</span><br>        <span class="hljs-type">Record</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> input.toEntity();<br>        <span class="hljs-type">Record</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> recordRepo.findById(entity.getRecordId()).orElse(<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> (Objects.isNull(row) || !row.getUserId().equals(entity.getUserId())) &#123;<br>            logger.warn(<span class="hljs-string">&quot;用户 &#123;&#125; 找不到记录 &#123;&#125;&quot;</span>, entity.getUserId(), entity.getRecordId());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">RecordDTO</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> RecordDTO.fromEntity(recordRepo.save(entity));<br>        List&lt;Integer&gt; tagIds = input.getTagIds();<br>        <span class="hljs-keyword">if</span> (Objects.nonNull(tagIds)) &#123;<br>            List&lt;RecordTagMap&gt; recordTagMapList = tagService.saveTagMap(input.getUserId(), input.getRecordId(), tagIds);<br>            result.setTagIds(recordTagMapList.stream().map(RecordTagMap::getTagId).toList());<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteRecord</span><span class="hljs-params">(Integer userId, Long recordId)</span> &#123;<br>        <span class="hljs-comment">// 删除记录</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;RecordDTO&gt; <span class="hljs-title function_">selectRecords</span><span class="hljs-params">(Integer userId, LocalDate date)</span> &#123;<br>        <span class="hljs-comment">// 按单个日期查询</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Record&gt; <span class="hljs-title function_">selectRecords</span><span class="hljs-params">(Integer userId, LocalDate startDate, LocalDate endDate)</span> &#123;<br>        <span class="hljs-comment">// 按日期期间查询</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="RecordService重构后"><a href="#RecordService重构后" class="headerlink" title="RecordService重构后"></a>RecordService重构后</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecordService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RecordRepo recordRepo;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RecordTagMapRepo recordTagMapRepo;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> RecordDTO <span class="hljs-title function_">insertRecord</span><span class="hljs-params">(Integer userId, RecordDTO input)</span> &#123;<br>        <span class="hljs-comment">// 新增记录</span><br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> RecordDTO <span class="hljs-title function_">updateRecord</span><span class="hljs-params">(Integer userId, RecordDTO input)</span> &#123;<br>        <span class="hljs-comment">// 更新记录</span><br>        <span class="hljs-type">Record</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> Record.fromDTO(userId, input, recordRepo, recordTagMapRepo);<br>        <span class="hljs-type">Record</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> entity.update();<br>        <span class="hljs-keyword">return</span> result.toDTO();<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteRecord</span><span class="hljs-params">(Integer userId, Long recordId)</span> &#123;<br>        <span class="hljs-comment">// 删除记录</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;RecordDTO&gt; <span class="hljs-title function_">selectRecords</span><span class="hljs-params">(Integer userId, LocalDate date)</span> &#123;<br>        <span class="hljs-comment">// 按单个日期查询</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;RecordDTO&gt; <span class="hljs-title function_">selectRecords</span><span class="hljs-params">(Integer userId, LocalDate startDate, LocalDate endDate)</span> &#123;<br>        <span class="hljs-comment">// 按日期期间查询</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>之前实现了基于API的单元测试，所以重构过程得到了一定程度的保护，因为这次重构不会改变API的输入和输出。</p><p>新的实体类不是Spring的Bean，不需要依赖框架就可以对其进行单元测试，减少了执行时间，而且测试代码也不需要声明那些多余的MockBean，可以变得更加简洁。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除了上面提到的几个问题，这次OOP还发现这种编程方式容易让类变得更多，如果业务逻辑很简单，那采用Service层业务代码和贫血模型可以让代码更清晰和更好维护。</p><p>我在OOP上面还有很长的路要走，这次改完之后还是挺喜欢这种代码风格的，而且感觉距离DDD和微服务又进了一步。</p>]]></content>
    
    
    <categories>
      
      <category>技术探索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象编程</tag>
      
      <tag>OOP</tag>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单元测试初体验</title>
    <link href="/2023/01/16/%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8B-2023-01-16-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%88%9D%E4%BD%93%E9%AA%8C-2023-01-16-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2023/01/16/%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8B-2023-01-16-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%88%9D%E4%BD%93%E9%AA%8C-2023-01-16-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从前参与的软件开发项目中，我们几乎没有写过真正的单元测试。一方面是因为项目进度紧张，实现功能就已经很费劲了，很难再抽出额外的时间和精力。另一方面是对单元测试的效果始终有所怀疑，觉得不值得付出那么大的代价来学习和实践。主要都是一些业务项目，写的是业务逻辑，不是平台或者框架，也很少造齿轮，所以代码复用率很低，更加觉得没有必要再增加单元测试的投入。虽然现实如此，但还是感到有点遗憾。正好去年有时间自己倒腾一个小应用，所以就以一个开发人员（as a Developer, not a Tester）的角度来试试编写单元测试，看看是一种什么样的体验。</p><h2 id="体验过程"><a href="#体验过程" class="headerlink" title="体验过程"></a>体验过程</h2><h3 id="测什么？"><a href="#测什么？" class="headerlink" title="测什么？"></a>测什么？</h3><ol><li>首要是核心功能。<br> 这个小应用的核心功能是记录个人时间花销，并支持导出数据。都是一些CRUD操作，并没有多少逻辑。当然字段类型和长度都是有限制的，必要时也应测试，但在设想的应用场景中，这方面的异常几乎不会发生，除非应用场景有了变化，此时应该重新考虑设计。<strong>在这里，我比较关注调用API的响应是否符合前后端的契约，当变更影响API时必须提供警报以做任何调整。因此，我将API视作一个完整有意义的单元来测试。</strong>至于服务层或者实体类方法，目前逻辑太过简单，即使测试报错也提供不了多少参考价值。</li><li>然后是较复杂的非核心功能，例如月度报告。<br> 报告中的逻辑会复杂一点，比如按分类合计时间、排序等。继续以API为单元来测试也可以，这是一种简单粗暴的方法，之前也见过别人的项目这么做，并达到了很高的测试覆盖率。在这里，有2个原因让我改为以类方法为单位：<ul><li>报告相关API返回的是文件，我无法直接校验正确性，必须读取文件内容之后才能做比较，<strong>这会给编写测试代码增加工作量</strong>；</li><li>文件格式中有xlsx和zip，读取文件内容的代码本身就会比较复杂，<strong>这段测试代码本身就容易出现缺陷，增加今后的维护难度</strong>；<br> 实际上这里需要关注业务代码的设计，将生成报告的逻辑抽离出来，放到一个或者几个类中，与查询数据、生成文件、API封装等分开，这些功能交给框架和工具库就好了。这样我就能对报告逻辑进行单独的单元测试。这时的测试代码看起来就开始有点像那么回事了。</li></ul></li><li>后来还添加了工具类。<br> 自己造的工具不多，有点懒得写，但为了测试覆盖率更好看一点，而且想到搞不好会越积越多变成技术债，所以还是简单补了一些。<strong>其实工具类的代码使用率高，容错率低，更应该好好测试。</strong></li></ol><h3 id="怎么测"><a href="#怎么测" class="headerlink" title="怎么测"></a>怎么测</h3><h4 id="测试场景（路径）选择"><a href="#测试场景（路径）选择" class="headerlink" title="测试场景（路径）选择"></a>测试场景（路径）选择</h4><p>为了控制工作量，我的单元测试都只满足这样一类场景：用正确的输入调用被测试程序，得到预期的最终结果。这在《持续交付》中被称为<code>Happy Path</code>。<br>但是更好的单元测试还应该包括一些重要的部分，比如<code>Sad Path</code>，就是针对异常输入的测试。由于这个小应用不是关键系统（比如支付系统、资金系统等），而我也承认自己比较懒，所以覆盖大部分的<code>Happy Path</code>就够了，有些涉及到文件的测试，甚至只有一个很简单的冒烟测试，只要运行程序、创建文件、删除文件不报错就行。</p><h4 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h4><p>应用基于Spring Boot 3构建，单元测试框架也自然优先选择spring-boot-starter-test和JUnit5。TestNG似乎也不错，但还是先把JUnit用起来吧。至于Spock，最近几年也很热，但因为要用Groovy，我担心其中的DSL会比较麻烦，所以就没考虑。</p><p>Spring Boot提供了一些支持测试的注解，包括针对应用测试的注解<code>@SpringBootTest</code>和针对切片测试的注解（例如<code>@WebMvcTest</code>）。</p><ul><li><code>@SpringBootTest</code>注解使用时默认会加载完整的应用上下文（ApplicationContext），如果没有特别指定测试配置（<code>@TestConfiguration</code>），那就会采用默认的配置，这样就需要真实的外部依赖项（例如数据库）才能正常运行。但单元测试应该排除不可控的外部依赖项，用存根或者模拟对象代替。所以折腾一番之后，我还是抛弃了<code>@SpringBootTest</code>，改用<code>@WebMvcTest</code>。</li><li><code>@WebMvcTest</code>注解实现了一种应用切片，可以针对基于MVC的Web服务做测试，并且提供了Mock自动配置来隔离外部依赖项，比<code>@SpringBootTest</code>更适合用于单元测试。</li></ul><p>使用Spring Boot这些测试注解有一个比较大的问题，就是多多少少还是要启动Spring Boot，因为需要自动配置一部分应用上下文，这就导致执行时间比较长。当测试案例较少的时候还好，多了之后整体时间就会太长，既影响开发，又影响持续集成。一个可能的办法是把API交给契约测试，缩小测试单元的范围，仅测试服务层或实体类方法，就可以不用启动Spring Boot。</p><h4 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h4><p>编写测试代码时，自然就会想要将数据和逻辑解耦，减少相互影响，便于维护。</p><h5 id="测试数据是什么？"><a href="#测试数据是什么？" class="headerlink" title="测试数据是什么？"></a>测试数据是什么？</h5><p>这次写单测的一个收获，就是意识到测试数据的问题，这是以前所看的教程中没有提及的。</p><p>在编写单元测试时，测试数据一般包含以下三部分内容：</p><ol><li>被测对象的输入</li><li>被测对象的预期输出</li><li>存根（stub，也称打桩）</li></ol><p>在实际应用中创建测试数据时，应该结合工具来考虑如何提供这几部分数据。</p><h5 id="数据提供"><a href="#数据提供" class="headerlink" title="数据提供"></a>数据提供</h5><p><a href="https://junit.org/junit5/">JUnit5</a>提供了一些参数化测试的工具，还是挺灵活的。我尝试了其中几种，各有千秋。</p><ul><li><p><code>@CsvFileSource</code>，数据来源注解之一，这个注解可以读取一个csv文件中的内容，转化为测试方法的参数。<br>  适用于测试参数类型都是JUnit所支持的（非客户化类型），且参数数量不多的场景。如果参数中有客户化类型，JUnit无法自动转化，需要借助其他工具来实现。当参数数量很多时，应该考虑重新设计和重构代码，因为一个方法的参数太多不是一个好的编程实践，容易出错，不好维护。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@CsvFileSource(resources = &quot;/two-column.csv&quot;, numLinesToSkip = 1)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testWithCsvFileSourceFromClasspath</span><span class="hljs-params">(String country, <span class="hljs-type">int</span> reference)</span> &#123;<br>    assertNotNull(country);<br>    assertNotEquals(<span class="hljs-number">0</span>, reference);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@ArgumentsSource</code>，数据来源注解之一，可用于指定自定义的、可重用的参数提供者。<br>  这种方式非常灵活，可以为测试方法提供多个不同类型的参数。由于是代码实现，数据可以任意来源，比如代码、文件、数据库等，还可以进行预加工，所以适用于数据来源比较复杂的场景。例如我可以从一个JSON文本文件中同时读取输入数据、预期输出数据、存根数据，借助JSON格式提高了可读性，并且便于使用工具做反序列化。设想一下如果这三部分数据都维护在CSV文件中，同一批必须处在同一行，数据列会有三份，列数会很多，非常不直观，也不利于变更。<br>  灵活性也带来复杂性，在数据文件和测试方法之外，又增加了一个需要维护的参数提供者，通常这个参数提供者的代码也会比较复杂。在实际应用中，案例往往有其独特性，至少在目前这个应用场景中，一个ArgumentsProvider只能满足一个测试案例，需要给每个测试案例创建对应的ArgumentsProvider类，这样类多了不利于维护。虽然也可以想办法让多个测试案例共享一个ArgumentsProvider，但这样又会造成案例代码之间的耦合，违反独立性。另一方面，这种灵活性也是依赖于测试框架，今后变更或者升级框架版本都需要考虑这个依赖带来的关联影响。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@ArgumentsSource(MyArgumentsProvider.class)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testWithArgumentsSource</span><span class="hljs-params">(String argument)</span> &#123;<br>    assertNotNull(argument);<br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArgumentsProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ArgumentsProvider</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Stream&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Arguments</span>&gt; provideArguments(ExtensionContext context) &#123;<br>        <span class="hljs-keyword">return</span> Stream.of(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>).map(Arguments::of);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Arguments Aggregator，参数聚合器，可以将数据进行聚合或者预加工，一般配合数据来源注解（例如：<code>@CsvSource</code>）使用。<br>  ArgumentsAggregator没有ArgumentsProvider灵活。一个聚合器类只能针对一种参数类型，所以多参数类型时需要创建多个聚合器类。虽然也可以在代码中实现数据来源，但这不是ArgumentsAggregator的设计目标，应该搭配框架提供的数据来源注解使用。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@CsvSource(&#123;</span><br><span class="hljs-meta">    &quot;Jane, Doe, F, 1990-05-20&quot;,</span><br><span class="hljs-meta">    &quot;John, Doe, M, 1990-10-22&quot;</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testWithArgumentsAggregator</span><span class="hljs-params">(<span class="hljs-meta">@AggregateWith(PersonAggregator.class)</span> Person person)</span> &#123;<br>    <span class="hljs-comment">// perform assertions against person</span><br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonAggregator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ArgumentsAggregator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">aggregateArguments</span><span class="hljs-params">(ArgumentsAccessor arguments, ParameterContext context)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(arguments.getString(<span class="hljs-number">0</span>),<br>                        arguments.getString(<span class="hljs-number">1</span>),<br>                        arguments.get(<span class="hljs-number">2</span>, Gender.class),<br>                        arguments.get(<span class="hljs-number">3</span>, LocalDate.class));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Argument Conversion，提供参数类型转换。JUnit默认提供了一些常用类型的隐形转换，同时也支持自定义的显性转换。建议配合数据来源注解使用。<br>  其实我并没有使用过这个工具，但它也比较重要，所以在这里列出来。</p></li><li><p>自定义测试数据工厂，由自定义的工厂类提供测试数据，为了减少对框架的依赖，让代码看起来更简单易懂，尽量保持测试关注点的单一。这种方式在简单场景时，可以把方法放到一个工厂类中，减少类的数量。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insertRecord_WithUserDetails_ReturnNewRecord</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// given</span><br>    <span class="hljs-type">CustomUser</span> <span class="hljs-variable">customUser</span> <span class="hljs-operator">=</span> RecordApiTestDataFactory.getCustomUser();<br>    List&lt;Map&lt;String, RecordDTO&gt;&gt; recordTestData = RecordApiTestDataFactory.insertRecord();<br>    <span class="hljs-type">RecordDTO</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> recordTestData.get(<span class="hljs-number">0</span>).get(<span class="hljs-string">&quot;input&quot;</span>);<br>    <span class="hljs-type">RecordDTO</span> <span class="hljs-variable">expected</span> <span class="hljs-operator">=</span> recordTestData.get(<span class="hljs-number">0</span>).get(<span class="hljs-string">&quot;expected&quot;</span>);<br><br>    <span class="hljs-type">RecordPO</span> <span class="hljs-variable">inputPO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecordPO</span>();<br>    BeanUtils.copyProperties(input, inputPO);<br>    <span class="hljs-type">RecordPO</span> <span class="hljs-variable">dbPO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecordPO</span>();<br>    BeanUtils.copyProperties(expected, dbPO);<br>    when(recordRepo.save(inputPO)).thenReturn(dbPO);<br><br>    <span class="hljs-comment">// when</span><br>    <span class="hljs-comment">// build MockMvcRequest</span><br><br>    <span class="hljs-comment">// then</span><br>    <span class="hljs-comment">// perform MockMvcRequest and assertions</span><br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecordApiTestDataFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">USER_ID</span> <span class="hljs-operator">=</span> UserTestDataFactory.USER_ID_1;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CustomUser <span class="hljs-title function_">getCustomUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> UserTestDataFactory.CUSTOM_USER_1;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Map&lt;String, RecordDTO&gt;&gt; <span class="hljs-title function_">insertRecord</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2022</span>, <span class="hljs-number">8</span>, <span class="hljs-number">25</span>);<br><br>        <span class="hljs-type">RecordDTO</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecordDTO</span>(USER_ID, <span class="hljs-literal">null</span>, date, <span class="hljs-number">60</span>, <span class="hljs-string">&quot;测试001&quot;</span>);<br><br>        <span class="hljs-type">RecordDTO</span> <span class="hljs-variable">expected</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecordDTO</span>(USER_ID, <span class="hljs-number">100L</span>, date, <span class="hljs-number">60</span>, <span class="hljs-string">&quot;测试001&quot;</span>);<br><br>        Map&lt;String, RecordDTO&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        data.put(<span class="hljs-string">&quot;input&quot;</span>, input);<br>        data.put(<span class="hljs-string">&quot;expected&quot;</span>, expected);<br>        <span class="hljs-keyword">return</span> Collections.singletonList(data);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>我最后还是将大部分测试数据来源改成自定义测试数据工厂，虽然在比较复杂的场景下，这种方式实现起来会比较有难度，代码可读性也会变得不太好，但目前逻辑还很简单，今后也想尽量保持测试点的单一，去倒逼业务代码的设计有更好的可测试性。实在不行还可以重新利用框架，JUnit还是挺好用的，并不是工具不好，只是不同场景有不同选择，还有一点个人喜好。</p><h5 id="数据维护"><a href="#数据维护" class="headerlink" title="数据维护"></a>数据维护</h5><p>一开始我是将测试数据维护在一个个数据文件里的，有的是JSON，有的是CSV，让我这么做的原因有2个，一个是解耦，一个是数据驱动。</p><p>这么做之后发现了一些问题：</p><ol><li>测试代码的结构分成了三部分：数据文件、数据提供类、测试类&#x2F;方法。如果一个新人想要完全掌握一个测试案例，那么他需要搞懂这三个文件以及它们之间的关联才行。更严重的问题是，今后对测试案例的变更，很可能需要同时涉及这三个文件，无形中增加的维护工作量有点不值得。从这个角度来看，数据驱动在需要让同一个方法测试多种不同场景的输入(同一个测试方法，多条<code>Happy Path</code>）时，才会体现它的最大价值。</li><li>数据提供类中，增加了读取文件的代码，这也是需要调试和维护的。</li><li>文件转换为对象的过程，一般会使用反序列化工具，对类的结构有要求（比如空构造器、Getter、Setter等），导致业务代码需要做出一些非业务需要的变更，变得没那么优雅和安全。因为我也在尝试一些面向对象编程（OOP）的做法，所以这一点让我颇为不爽。</li></ol><p>面对这些问题，经过一番纠结之后，我还是决定改代码，将测试数据和提供类放到一起，最终变成上面的自定义测试数据工厂，虽然变得耦合和有点简单粗暴，但在目前的情况下，更易于阅读和维护。另外，这个方案还有待进一步优化，例如使用<code>@MethodSource</code>来指定一个方法提供参数，这样能让测试方法中的代码与工厂类解耦。个人悟性不够，无法一步到位，只好老老实实一次次迭代优化了。</p><p>所以在这过程中，刚开始就不小心犯了过度设计的错误。</p><h3 id="什么时候运行单元测试？"><a href="#什么时候运行单元测试？" class="headerlink" title="什么时候运行单元测试？"></a>什么时候运行单元测试？</h3><ol><li>每次提交代码的时候。这是持续集成的要求，测试不通过表明变更造成了缺陷，或者测试代码与业务不同步。</li><li>对代码重构的过程中。我后来要对代码做一些重构，应用功能需要保持不变，所以过程中会时不时运行测试看看有没有问题。虽然现在的单测很简单，但还是能感受到测试对功能的保护作用，那种可以放开手改代码的安全感挺不错的。</li><li>构建制品前。这也是持续集成的要求，在构建流程中添加了测试步骤，测试异常就不会继续运行打包和上传制品库了，必须优先解决问题。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大部分体会在过程中已经说明了，总的来看是一次不错的体验，初步认识到单元测试的价值。</p><ul><li>既能为持续集成把第一道关，又能为重构提供必要的保护，对代码质量是一层很好的保障。</li><li>相对于集成测试、接口&#x2F;契约测试、Web测试，它不需要引入新的工具，不需要部署一套独立的环境，不需要大量的人工干预，只是在原有的应用项目中添加相应的目录和代码。对技术团队来说，学习成本、开发成本、运维成本也相对较小。性价比高。</li><li>对于小型应用，提供了基本的质量保障。对于大型应用，应该可以及早过滤掉一部分缺陷，降低整体成本。</li><li>单元测试并不提供直接的业务价值，还需要额外的投入，所以实践时还是要时刻注意投入产出的平衡，避免过度假定、过度设计。</li></ul><p>附加一段《单元测试的艺术》中对单元测试的定义：</p><ul><li><p>单元测试<br>  一个<strong>单元测试</strong>是一段自动化的代码，这段代码调用被测试的工作单元，之后对这个单元的单个最终结果的某些假设进行检验。单元测试几乎都是用单元测试框架编写的。单元测试容易编写，能快速运行。单元测试可靠、可读，并且可维护。只要产品代码不发生变化，单元测试的结果是稳定的。</p></li><li><p>优秀单元测试的特性</p><ul><li>一段自动化的代码，它调用另一个方法，然后检验关于此方法或类的逻辑行为的某些假设。</li><li>用一个自动化测试框架编写。</li><li>容易编写。</li><li>运行快速。</li><li>能由开发团队里的任何人重复执行。</li></ul></li></ul><hr><p>引用：</p><ol><li>JUnit 5 User Guide: <a href="https://junit.org/junit5/docs/current/user-guide/">https://junit.org/junit5/docs/current/user-guide/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>系统工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
      <tag>测试</tag>
      
      <tag>JUnit</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
